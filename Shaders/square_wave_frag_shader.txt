#version 330 core
#define PI 3.14159265359

in vec2 fragmentCoord;

layout (location = 0) out vec4 fragmentColor;

uniform float u_orientation;
uniform float u_standard_deviation;
uniform float u_phase;
uniform float u_contrast;
uniform float u_spatial_frequency;

void main()
{
    float x = fragmentCoord.x*cos(u_orientation*(PI/180.0)) + fragmentCoord.y*sin(u_orientation*(PI/180.0));

    // Generate square wave with given sf, phase, and orientation (see line above)
    float y = step(0.5, (sin((x*(u_spatial_frequency*2*PI))+(u_phase*(PI/180.0)))+1.0)/2.0);

    // Rescale for a given contrast
    float a = 0.5-(u_contrast/2);
    float b = 0.5+(u_contrast/2);
    y = ((b-a)*y)+a;

    // calculate distance from center of the circle
    float coord_to_center = distance(fragmentCoord.xy, vec2(0.5));

    // compute smooth step gaussian using the distance from the center of the texture
    float gauss = smoothstep(0.4, 0.50, coord_to_center);

    // Generate gaussian mask
    float gray = 0.5;

    // Convolve with gaussian mask
    y = mix(y, gray, gauss);

    y = pow(y, (1/2.42));

	fragmentColor = vec4(y, y, y, 1.0);
}